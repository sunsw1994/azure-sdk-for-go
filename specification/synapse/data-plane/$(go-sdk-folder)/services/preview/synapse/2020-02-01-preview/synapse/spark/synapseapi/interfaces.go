package synapseapi

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "context"
    "$(go-sdk-folder)/services/preview/synapse/2020-02-01-preview/synapse/spark"
    "github.com/Azure/go-autorest/autorest"
)

        // SparkBatchClientAPI contains the set of methods on the SparkBatchClient type.
        type SparkBatchClientAPI interface {
            CancelSparkBatchJob(ctx context.Context, batchID int32) (result autorest.Response, err error)
            CreateSparkBatchJob(ctx context.Context, sparkBatchJobOptions synapse.SparkBatchJobOptions, detailed *bool) (result synapse.SparkBatchJob, err error)
            GetSparkBatchJob(ctx context.Context, batchID int32, detailed *bool) (result synapse.SparkBatchJob, err error)
            GetSparkBatchJobs(ctx context.Context, from *int32, size *int32, detailed *bool) (result synapse.SparkBatchJobCollection, err error)
        }

        var _ SparkBatchClientAPI = (*synapse.SparkBatchClient)(nil)
        // SparkSessionClientAPI contains the set of methods on the SparkSessionClient type.
        type SparkSessionClientAPI interface {
            CancelSparkSession(ctx context.Context, sessionID int32) (result autorest.Response, err error)
            CancelSparkStatement(ctx context.Context, sessionID int32, statementID int32) (result synapse.SparkStatementCancellationResult, err error)
            CreateSparkSession(ctx context.Context, sparkSessionOptions synapse.SparkSessionOptions, detailed *bool) (result synapse.SparkSession, err error)
            CreateSparkStatement(ctx context.Context, sessionID int32, sparkStatementOptions synapse.SparkStatementOptions) (result synapse.SparkStatement, err error)
            GetSparkSession(ctx context.Context, sessionID int32, detailed *bool) (result synapse.SparkSession, err error)
            GetSparkSessions(ctx context.Context, from *int32, size *int32, detailed *bool) (result synapse.SparkSessionCollection, err error)
            GetSparkStatement(ctx context.Context, sessionID int32, statementID int32) (result synapse.SparkStatement, err error)
            GetSparkStatements(ctx context.Context, sessionID int32) (result synapse.SparkStatementCollection, err error)
            ResetSparkSessionTimeout(ctx context.Context, sessionID int32) (result autorest.Response, err error)
        }

        var _ SparkSessionClientAPI = (*synapse.SparkSessionClient)(nil)
