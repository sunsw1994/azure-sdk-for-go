package synapse

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

        // PluginCurrentState enumerates the values for plugin current state.
    type PluginCurrentState string

    const (
                // Cleanup ...
        Cleanup PluginCurrentState = "Cleanup"
                // Ended ...
        Ended PluginCurrentState = "Ended"
                // Monitoring ...
        Monitoring PluginCurrentState = "Monitoring"
                // Preparation ...
        Preparation PluginCurrentState = "Preparation"
                // Queued ...
        Queued PluginCurrentState = "Queued"
                // ResourceAcquisition ...
        ResourceAcquisition PluginCurrentState = "ResourceAcquisition"
                // Submission ...
        Submission PluginCurrentState = "Submission"
            )
    // PossiblePluginCurrentStateValues returns an array of possible values for the PluginCurrentState const type.
    func PossiblePluginCurrentStateValues() []PluginCurrentState {
        return []PluginCurrentState{Cleanup,Ended,Monitoring,Preparation,Queued,ResourceAcquisition,Submission}
    }

        // SchedulerCurrentState enumerates the values for scheduler current state.
    type SchedulerCurrentState string

    const (
                // SchedulerCurrentStateEnded ...
        SchedulerCurrentStateEnded SchedulerCurrentState = "Ended"
                // SchedulerCurrentStateQueued ...
        SchedulerCurrentStateQueued SchedulerCurrentState = "Queued"
                // SchedulerCurrentStateScheduled ...
        SchedulerCurrentStateScheduled SchedulerCurrentState = "Scheduled"
            )
    // PossibleSchedulerCurrentStateValues returns an array of possible values for the SchedulerCurrentState const type.
    func PossibleSchedulerCurrentStateValues() []SchedulerCurrentState {
        return []SchedulerCurrentState{SchedulerCurrentStateEnded,SchedulerCurrentStateQueued,SchedulerCurrentStateScheduled}
    }

        // SparkBatchJobResultType enumerates the values for spark batch job result type.
    type SparkBatchJobResultType string

    const (
                // Cancelled ...
        Cancelled SparkBatchJobResultType = "Cancelled"
                // Failed ...
        Failed SparkBatchJobResultType = "Failed"
                // Succeeded ...
        Succeeded SparkBatchJobResultType = "Succeeded"
                // Uncertain ...
        Uncertain SparkBatchJobResultType = "Uncertain"
            )
    // PossibleSparkBatchJobResultTypeValues returns an array of possible values for the SparkBatchJobResultType const type.
    func PossibleSparkBatchJobResultTypeValues() []SparkBatchJobResultType {
        return []SparkBatchJobResultType{Cancelled,Failed,Succeeded,Uncertain}
    }

        // SparkErrorSource enumerates the values for spark error source.
    type SparkErrorSource string

    const (
                // Dependency ...
        Dependency SparkErrorSource = "Dependency"
                // System ...
        System SparkErrorSource = "System"
                // Unknown ...
        Unknown SparkErrorSource = "Unknown"
                // User ...
        User SparkErrorSource = "User"
            )
    // PossibleSparkErrorSourceValues returns an array of possible values for the SparkErrorSource const type.
    func PossibleSparkErrorSourceValues() []SparkErrorSource {
        return []SparkErrorSource{Dependency,System,Unknown,User}
    }

        // SparkJobType enumerates the values for spark job type.
    type SparkJobType string

    const (
                // SparkJobTypeSparkBatch ...
        SparkJobTypeSparkBatch SparkJobType = "SparkBatch"
                // SparkJobTypeSparkSession ...
        SparkJobTypeSparkSession SparkJobType = "SparkSession"
            )
    // PossibleSparkJobTypeValues returns an array of possible values for the SparkJobType const type.
    func PossibleSparkJobTypeValues() []SparkJobType {
        return []SparkJobType{SparkJobTypeSparkBatch,SparkJobTypeSparkSession}
    }

        // SparkSessionResultType enumerates the values for spark session result type.
    type SparkSessionResultType string

    const (
                // SparkSessionResultTypeCancelled ...
        SparkSessionResultTypeCancelled SparkSessionResultType = "Cancelled"
                // SparkSessionResultTypeFailed ...
        SparkSessionResultTypeFailed SparkSessionResultType = "Failed"
                // SparkSessionResultTypeSucceeded ...
        SparkSessionResultTypeSucceeded SparkSessionResultType = "Succeeded"
                // SparkSessionResultTypeUncertain ...
        SparkSessionResultTypeUncertain SparkSessionResultType = "Uncertain"
            )
    // PossibleSparkSessionResultTypeValues returns an array of possible values for the SparkSessionResultType const type.
    func PossibleSparkSessionResultTypeValues() []SparkSessionResultType {
        return []SparkSessionResultType{SparkSessionResultTypeCancelled,SparkSessionResultTypeFailed,SparkSessionResultTypeSucceeded,SparkSessionResultTypeUncertain}
    }

        // SparkStatementLanguageType enumerates the values for spark statement language type.
    type SparkStatementLanguageType string

    const (
                // Dotnetspark ...
        Dotnetspark SparkStatementLanguageType = "dotnetspark"
                // Pyspark ...
        Pyspark SparkStatementLanguageType = "pyspark"
                // Spark ...
        Spark SparkStatementLanguageType = "spark"
                // SQL ...
        SQL SparkStatementLanguageType = "sql"
            )
    // PossibleSparkStatementLanguageTypeValues returns an array of possible values for the SparkStatementLanguageType const type.
    func PossibleSparkStatementLanguageTypeValues() []SparkStatementLanguageType {
        return []SparkStatementLanguageType{Dotnetspark,Pyspark,Spark,SQL}
    }

